As of my last knowledge update in September 2021, the `::file-selector-button` pseudo-element was not a recognized or standardized CSS feature. It's possible that it might have been introduced or considered in newer CSS specifications or browser versions since that time.

If you are looking for ways to style file input buttons (i.e., `<input type="file">`), you typically use other techniques like combining CSS with HTML and JavaScript to achieve custom styling. For instance, you can visually style the button and overlay it with a custom design while keeping the file input element hidden.

Here's a brief example of how to create a custom-styled file input button:

**HTML:**
```html
<label for="file-upload" class="custom-file-input-button">
  <span>Choose a file</span>
  <input type="file" id="file-upload" style="display: none;">
</label>
```

**CSS:**
```css
.custom-file-input-button {
  display: inline-block;
  padding: 10px 20px;
  background-color: #0077FF;
  color: #fff;
  cursor: pointer;
  border-radius: 5px;
}

.custom-file-input-button input[type="file"] {
  display: none;
}
```

**JavaScript (Optional for Interaction):**
```javascript
const fileInput = document.getElementById('file-upload');
const customButton = document.querySelector('.custom-file-input-button');

customButton.addEventListener('click', () => {
  fileInput.click();
});

fileInput.addEventListener('change', () => {
  // Handle file selection and display the selected file's name, if needed.
  const selectedFile = fileInput.files[0];
  if (selectedFile) {
    console.log('Selected file:', selectedFile.name);
  }
});
```

This example creates a custom-styled file input button that looks like a regular button and uses CSS to hide the actual file input element. When the user clicks the "Choose a file" button, it triggers the file input element's click event programmatically, allowing the user to select a file. The selected file's name can be displayed or handled as needed.

Regarding SEO, styling file input buttons does not have a direct impact on SEO because it primarily deals with the visual presentation of form elements. SEO focuses more on content, structure, and metadata to improve a website's search engine ranking.

As for browser support, styling file input buttons using the approach described above is well-supported in modern web browsers. However, the `::file-selector-button` pseudo-element, if introduced in newer CSS specifications or browser versions, might have varying levels of support and behavior. To use it, you would need to check the specific documentation and compatibility information for the browsers you are targeting.