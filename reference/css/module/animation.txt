**CSS Animations**

**What:**
CSS animations allow you to create smooth and visually appealing transitions and movement effects on HTML elements without relying on JavaScript. Animations can alter an element's properties, such as position, size, color, and opacity, over a specified duration.

**Example:**
Here's a simple example of a CSS animation that gradually changes the background color of a `<div>` element:

```html
<!DOCTYPE html>
<html>
<head>
<style>
  .animated-box {
    width: 100px;
    height: 100px;
    background-color: blue;
    transition: background-color 1s ease;
  }
  
  .animated-box:hover {
    background-color: red;
  }
</style>
</head>
<body>

<div class="animated-box"></div>

</body>
</html>
```

**Why:**
CSS animations enhance user experience by adding interactivity and engagement to web pages. They can help draw attention to specific elements, provide feedback on user interactions, and make the overall design more engaging and modern. Animations can also convey information, guide users through processes, and add a touch of creativity to your website.

**Where:**
CSS animations can be used throughout your website, from simple hover effects to more complex animations like sliders, loaders, and transitions between different sections of a page. They are often used for interactive elements, UI components, and decorative elements.

**How:**
CSS animations are created using keyframes, which define specific stages of an animation's progress. You define the start and end states of an animation using keyframes, and then apply those keyframes to the target element using CSS rules. Transitions can be added using the `transition` property, while more complex animations are defined with the `@keyframes` rule.

**SEO:**
CSS animations can have an impact on SEO in terms of page loading times. Overly complex animations can slow down page rendering, affecting user experience and potentially SEO rankings. It's important to strike a balance between using animations to enhance the user experience and ensuring that they don't hinder page performance.

**Additional Notes:**
- CSS animations are often more performant than JavaScript-based animations, as they can be offloaded to the GPU and utilize hardware acceleration.
- Be mindful of motion sickness and usability concerns. Avoid excessive or overly rapid animations that might cause discomfort to users.
- Use animations judiciously and ensure they contribute to the overall user experience rather than overwhelming it.

**Browser Support:**
Most modern browsers support CSS animations. This includes Chrome, Firefox, Safari, Edge, and others. However, the level of support for certain CSS properties and features might vary between browsers. It's a good practice to test your animations across different browsers to ensure consistent behavior. For older browsers, consider providing fallbacks or graceful degradation.