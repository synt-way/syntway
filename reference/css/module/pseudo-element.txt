**CSS Pseudo-Elements**

**What:**
CSS pseudo-elements are virtual elements that allow you to style and manipulate certain parts of an HTML element's content without adding additional markup. They are used to create decorative or functional elements that don't exist in the HTML structure itself.

**Example:**
Here's an example of using the `::before` pseudo-element to add content before an element:

```html
<!DOCTYPE html>
<html>
<head>
<style>
  .custom-button::before {
    content: "â†’ ";
    font-weight: bold;
  }
</style>
</head>
<body>

<button class="custom-button">Click me</button>

</body>
</html>
```

**Why:**
CSS pseudo-elements are used to add extra styling or content to elements without modifying the actual HTML. They are particularly useful for creating decorative elements, like arrows, bullets, or labels, or for implementing design patterns like clearfix.

**Where:**
CSS pseudo-elements are applicable when you want to:
- Add decorative content before or after an element.
- Clear floated elements.
- Create special visual effects or interactions.

**How:**
Use double colons (`::`) to target pseudo-elements. Use properties like `content`, `before`, `after`, and other styling properties to define the appearance or content of the pseudo-element.

**SEO:**
CSS pseudo-elements don't have a direct impact on SEO. They are mainly used for styling and visual effects. However, well-implemented styles can improve the overall user experience, potentially affecting user engagement and indirectly influencing SEO.

**Additional Notes:**
- Pseudo-elements should be used for styling and decorative purposes, not for essential content or functionality.
- Use pseudo-elements sparingly and consider browser compatibility.

**Browser Support:**
CSS pseudo-elements are supported by all modern browsers. However, older versions of Internet Explorer might have limited support for some advanced pseudo-elements or properties. Always test your styles across different browsers to ensure consistent rendering.